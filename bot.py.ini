from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import os
import random
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "7962193493:AAHpofB5A7Wqdm1WITbMpMzTSyUmUXZ_MwM"

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
IMAGES_FOLDER ="D:\Images"

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–≤–∏–∑–∞: –∫–∞—Ä—Ç–∏–Ω–∫–∞ -> –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
quiz_data = {
    "image1.jpg": "–ü–∞–∫—à–∞",
    "image2.jpg": "–¢–∏–ª”ó",
    "image3.jpg": "–°—ã—Å–Ω–∞",
    "image4.jpg": "–ê–≤—Ç–∞–Ω",
    "image5.jpg": "–õ–∞—à–∞",
    "image6.jpg": "–ê—Ä”ë—Å–ª–∞–Ω",
    "image7.jpg": "–ö–∞—à–∫”ë—Ä",
    "image8.jpg": "–ô—ã—Ç”ë",
    "image9.jpg": "–ß”ë—Ö",
    "image10.jpg": "”ñ–Ω–µ",
    "image11.jpg": "–ö–∞—á–∞–∫–∞",
    "image12.jpg": "–£–ø”ë—Ç–µ",
    "image13.jpg": "–ú—É–ª–∫–∞—á",
    "image14.jpg": "–ü”ë–ª–∞–Ω",
    "image15.jpg": "–ü”ë—à–∏",
    "image16.jpg": "–£–ø–∞",
    "image17.jpg": "–í”ë–∫”ë—Ä",
    "image18.jpg": "–ö—É—à–∞–∫",
    "image19.jpg": "–¢”ë–º–∞–Ω–∞",
    "image20.jpg": "–ö”ë–≤–∞–∫–∞–ª",
    "image21.jpg": "–•—É—Ä",
}

# –°–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
random_words = [
    "–®–∫—É–ª","–ö–∞–π”ë–∫","–ô—ã–≤”ë“´","–ö”ó–ª–µ–Ω—á–µ","–ß”≥—Ä–µ—á–µ","–´–ª—Ç”ë–Ω","–ê–ª”ë–∫","–¢—É—Ä–∞—Ç","–ü–∞—Ç–∞–∫","–ü—É–∫–∞–Ω","–°”ó—Ç–µ–ª","–°–∞–≤”ë—Ç-—Å–∞–ø–∞","–ö”ó–Ω–µ–∫–µ","–ö”ë—Ä–∞–Ω—Ç–∞—à","–®”ë–ø—á”ë–∫","–°—ã–≤–ª”ë—à","–®”ë—Ä—á”ë–∫","“™–∞–Ω—Ç–∞–ª”ë–∫","“™—É–ª—Ç–∞–ª”ë–∫""–ü”≥—Ä–Ω–µ",
    "–ú”ë–π”ë—Ä","–ß”ó—Ä–µ","–•”ó–≤–µ–ª","–£–π”ë—Ö","“™”ë–ª—Ç”ë—Ä","–Æ—Ä","“™—É–Ω–∞—à–∫–∞","–ô”ó–ª—Ç”ó—Ä","–ü—É“´","–•”ë—è—Ä","–®”ë–Ω–∞","–Ø—à–∫–∞","–®—ã–≤","–í—É—Ç”ë","”≤–∫–µ—Ä—á”ó–∫","–•—É–ª–∞"
]

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤
def create_word_keyboard(correct_answer):
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ quiz_data (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
    all_quiz_answers = [v for k, v in quiz_data.items() if v != correct_answer]
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤
    all_random_words = random_words.copy()
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±–∞ —Å–ø–∏—Å–∫–∞
    all_possible_wrong_answers = all_quiz_answers + all_random_words
    
    # –í—ã–±–∏—Ä–∞–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
    wrong_answers = random.sample(all_possible_wrong_answers, 3)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ 4 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: 1 –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏ 3 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö
    options = [correct_answer] + wrong_answers
    random.shuffle(options)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [[InlineKeyboardButton(word, callback_data=word)] for word in options]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["current_quiz"] = random.sample(list(quiz_data.items()), 5)
    context.user_data["user_score"] = 0
    context.user_data["current_question_index"] = 0

    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∫–≤–∏–∑ –ø–æ —á—É–≤–∞—à—Å–∫–æ–º—É —è–∑—ã–∫—É.")
    await send_question(update, context)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_quiz = context.user_data.get("current_quiz", [])
    current_question_index = context.user_data.get("current_question_index", 0)

    if current_question_index >= len(current_quiz):
        await end_quiz(update, context)
        return

    image_path, correct_answer = current_quiz[current_question_index]
    context.user_data["correct_answer"] = correct_answer.lower()

    try:
        with open(os.path.join(IMAGES_FOLDER, image_path), "rb") as image:
            keyboard = create_word_keyboard(correct_answer)
            await update.effective_message.reply_photo(
                photo=image,
                caption="–ú”ó–Ω–ª–µ —á”ó—Ä—á—É–Ω –∫—É?",
                reply_markup=keyboard
            )
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.effective_message.reply_text("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_answer = query.data.lower()
    correct_answer = context.user_data.get("correct_answer", "")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if user_answer == correct_answer:
        context.user_data["user_score"] += 1
        result_text = "–ú–∞—Ç—Ç—É—Ä! –¢”ó—Ä”ó—Å! üéâ"
    else:
        result_text = f"–¢”ó—Ä”ó—Å –º–∞—Ä. –¢”ó—Ä”ó—Å –æ—Ç–≤–µ—Ç: {correct_answer}."

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏, –¥–æ–±–∞–≤–ª—è—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await query.edit_message_caption(
        caption=f"–ú”ó–Ω–ª–µ —á”ó—Ä—á—É–Ω –∫—É?\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_answer}\n{result_text}",
        reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    context.user_data["current_question_index"] += 1
    await send_question(update, context)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞
async def end_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_score = context.user_data.get("user_score", 0)
    await update.effective_message.reply_text(f"–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –¢—ã –Ω–∞–±—Ä–∞–ª {user_score} –±–∞–ª–ª–æ–≤ –∏–∑ 5.")

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if user_score == 5:
        await update.effective_message.reply_text("–ú–æ–ª–æ–¥–µ—Ü! –£ —Ç–µ–±—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è! üéâ")
    else:
        await update.effective_message.reply_text("–ù–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞? –ù–∞–∂–º–∏—Ç–µ /start.")

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    context.user_data.clear()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.run_polling()

if __name__ == "__main__":
    main()
    #cd "C:\Users\ega_c\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\Bot"
    #python bot.py.ini
    #C:\Users\ega_c\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\Bot