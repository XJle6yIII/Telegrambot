from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import os
import random
import logging

# Настройка логирования
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Токен вашего бота
TOKEN = "7962193493:AAFzDeKndwyfjv6EKEegGJlO7dLqdy4br34"

# Пути к папкам с изображениями
IMAGES_FOLDER_WILD_ANIMALS = "./Images/Animals/Wild"
IMAGES_FOLDER_DOMESTIC_ANIMALS = "./Images/Animals/domestic"
IMAGES_FOLDER_FOOD_PLANTS = "./Images/Nature/Foodplants"
IMAGES_FOLDER_MEDICINAL_PLANTS = "./Images/Nature/Medicinalplants"
IMAGES_FOLDER_DECORATIVE_PLANTS = "./Images/Nature/Ornamentalplants"
IMAGES_FOLDER_LESSONS = "./Images/Lessons"
AUDIO_FOLDER = "./Images/Audio"


# Данные для квиза: картинка -> правильный ответ
quiz_data_wild_animals = {
    "image1.jpg": "Мулкач",
    "image2.jpg": "Кашкӑр",
    "image3.jpg": "Упа",
    "image4.jpg": "Тилӗ",
    "image5.jpg": "Палан",
    "image6.jpg": "Пурӑш",
    "image7.jpg": "Хир кушакĕ",
    "image8.jpg": "Хăнтăр",
    "image9.jpg": "Хир сысни",
    "image10.jpg": "Юс",
    "image11.jpg": "Шурӑ упа",
    "image12.jpg": "Вӑлта тӑпри",
    "image13.jpg": "Шашка",
    "image14.jpg": "Чалăш суха",
    "image15.jpg": "Хир кушакĕ",
}

quiz_data_domestic_animals = {
    "image1.jpg": "Йытӑ",
    "image2.jpg": "Кушак",
    "image3.jpg": "Ӗне",
    "image4.jpg": "Лаша",
    "image5.jpg": "Качака",
    "image6.jpg": "Сурӑх",
    "image7.jpg": "Сысна",
    "image8.jpg": "Кролик",
    "image9.jpg": "Чӑх",
    "image10.jpg": "Кӑвакал",
    "image11.jpg": "Хур",
    "image12.jpg": "Кăркка",
    "image13.jpg": "Арлан",
    "image14.jpg": "Попугай",
    "image15.jpg": "Тинӗс сысни",
}

quiz_data_medicinal_plants = {
    "image1.jpg": "Хурӑн",
    "image2.jpg": "Катӑркас",
    "image3.jpg": "Кӗтмел",
    "image4.jpg": "Вӗлтрен",
    "image5.jpg": "Кукшапуҫ",
}

quiz_data_food_plants = {
    "image1.jpg": "Ҫӗрулми",
    "image2.jpg": "Хӗрлӗ хурлӑхан",
    "image3.jpg": "Хура ҫырла",
    "image4.jpg": "Хура хурлӑхан",
    "image5.jpg": "Улмуҫҫи",
}

quiz_data_decorative_plants = {
    "image1.jpg": "Кактус",
    "image2.jpg": "Акаци",
    "image3.jpg": "Тюльпан",
    "image4.jpg": "Нарцисс",
    "image5.jpg": "Алоэ",
    "image6.jpg": "Бегони",
}

# Список случайных слов для неправильных ответов
random_words = [
    "Шкул", "Кайӑк", "Йывӑҫ", "Кӗленче", "Чӳрече", "Ылтӑн", "Алӑк", "Турат", "Патак", "Пукан", "Сӗтел", "Савӑт-сапа", "Кӗнеке", "Кӑранташ", "Шӑпчӑк", "Сывлӑш", "Шӑрчӑк", "Ҫанталӑк", "Ҫулталӑк", "Пӳрне",
    "Мӑйӑр", "Чӗре", "Хӗвел", "Уйӑх", "Ҫӑлтӑр", "Юр", "Ҫунашка", "Йӗлтӗр", "Пуҫ", "Хӑяр", "Шӑна", "Яшка", "Шыв", "Вутӑ", "Ӳкерчӗк", "Хула"
]
LESSON_TOPICS = {
    1: "Салам",
    2: "Сывлӑх сунатӑп",
    3: "Ку кам?",
    4: "Ку мӗн?",
    5: "Класра",
    6: "Пирӗн пӗчӗк туссем",
    7: "Выльӑх-чӗрлӗх",
    8: "Килти кайӑк-кӗшӗк",
    9: "Çамрӑк чӗр чунсем",
    10: "Мӗн пур?",
    11: "Атьӑр вылятпӑр! Ку мӗн?", 
    12: "Эпӗ мӗн тӑватӑп?",
    13: "Эсӗ мӗн тӑватӑн?",
    14: "Вӑл мӗн тӑвать?",
    15: "Миçе?",
    16: "Миçе? Теçеткесем",
    17: "Мӗн тӗслӗ?",
    18: "Пӗтӗмлетӳ",
    19: "Этнер кил-йышӗ",
    20: "Манӑн кил-йыш",
    21: "Эсӗ миçе çулта?",
    22: "Манӑн пӳлӗм",
    23: "Мӗнле?",
    24: "Тӗпелте",
    25: "Питӗ тутлӑ!",
    26: "Сӗт-турӑх",
    27: "Улма-çырла",
    28: "Пахча ҫимӗҫ",
    29: "Çуралнӑ кун",
    30: "Парнесем",
    31: "Çӗнӗ çул ячӗпе!",
    32: "Атьӑр вылятпӑр!",
    33: "Хӗллехи çанталӑк",
    34: "Хӗлле мӗнле лайӑх!",
    35: "Хӗллехи тумтир",
    36: "Ирхине",
    37: "Ҫӑвӑнмалли пӳлӗм",
    38: "Кӑнтӑрла шкулта",
    39: "Вӗреневре",
    40: "Пушӑ вӑхӑтра",
    41: "Шӑмат кун каçхине",
    42: "Кун йӗрки",
    43: "Çурхи çанталӑк",
    44: "Кайӑксем",
    45: "Паркра",
    46: "Вӑрманта",
    47: "Пӗрремӗш чечексем",
    48: "Ҫерем ҫинче",
    49: "Çуркунне",
    50: "Атьӑр вылятпӑр!",
    51: "Каникулта",
    52: "Ялта",
    53: "Хулара",
    54: "Кӳлмек",
    55: "Ача-пӑча лаптӑкӗ",
    56: "Спорт центрӗ",
    57: "Çулталӑк вӑхӑчӗсем",
    58: "Часах ҫулла",
    59: "Çырлара",
    60: "Ҫул ҫӳрев",
    61: "Шыв хӗрринче",
    62: "Чӗр чун паркӗ",
    63: "Шупашкар",
    64: "Ҫуллахи вӑрманта",
    65: "Çут çанталӑк",
    66: "Атьӑр вылятпӑр!",
    67: "Пусто",
    68: "Пусто",
    69: "Пусто",
    70: "Пусто",

}

# Создание клавиатуры с кнопками для выбора слов
def create_word_keyboard(correct_answer):
    # Создаем список всех возможных ответов из quiz_data (исключая текущий правильный)
    all_quiz_answers = [v for k, v in quiz_data_wild_animals.items() if v != correct_answer] + \
                       [v for k, v in quiz_data_domestic_animals.items() if v != correct_answer] + \
                       [v for k, v in quiz_data_food_plants.items() if v != correct_answer] + \
                       [v for k, v in quiz_data_medicinal_plants.items() if v != correct_answer] + \
                       [v for k, v in quiz_data_decorative_plants.items() if v != correct_answer]
    
    # Создаем список всех случайных слов
    all_random_words = random_words.copy()
    
    # Объединяем оба списка
    all_possible_wrong_answers = all_quiz_answers + all_random_words
    
    # Выбираем 3 случайных неправильных ответа
    wrong_answers = random.sample(all_possible_wrong_answers, 3)
    
    # Создаем список из 4 вариантов: 1 правильный и 3 неправильных
    options = [correct_answer] + wrong_answers
    random.shuffle(options)  # Перемешиваем варианты

    # Создаем клавиатуру
    keyboard = [[InlineKeyboardButton(word, callback_data=word)] for word in options]
    return InlineKeyboardMarkup(keyboard)

# Обработчик команды /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Создаем клавиатуру для выбора между квизами и уроками
    keyboard = [
        [InlineKeyboardButton("Квизы", callback_data="quizzes")],
        [InlineKeyboardButton("Уроки", callback_data="lessons")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Привет! Выбери, что хочешь сделать:", reply_markup=reply_markup)

# Обработчик выбора между квизами и уроками
async def handle_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "quizzes":
        # Создаем клавиатуру для выбора раздела квиза
        keyboard = [
            [InlineKeyboardButton("Животные", callback_data="quiz_animals")],
            [InlineKeyboardButton("Природа", callback_data="quiz_plants")],
            [InlineKeyboardButton("Назад", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Выбери раздел квиза:", reply_markup=reply_markup)
    elif query.data == "lessons":
        # Создаем клавиатуру для выбора группы уроков
        keyboard = [
        [InlineKeyboardButton("1-10 Уроки", callback_data="lessons_1_10")],
        [InlineKeyboardButton("11-20 Уроки", callback_data="lessons_11_20")],
        [InlineKeyboardButton("21-30 Уроки", callback_data="lessons_21_30")],
        [InlineKeyboardButton("31-40 Уроки", callback_data="lessons_31_40")],
        [InlineKeyboardButton("41-50 Уроки", callback_data="lessons_41_50")],
        [InlineKeyboardButton("51-60 Уроки", callback_data="lessons_51_60")],
        [InlineKeyboardButton("61-70 Уроки", callback_data="lessons_61_70")],
        [InlineKeyboardButton("Назад", callback_data="back_to_start")] 
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("Выбери группу уроков:", reply_markup=reply_markup)



# Обработчик выбора группы уроков
async def handle_lessons_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    group_data = query.data.split("_")
    start = int(group_data[1])
    end = int(group_data[2])
    
    keyboard = []
    # Создаем кнопки для каждого урока в диапазоне
    for lesson_num in range(start, end + 1):
        topic = LESSON_TOPICS.get(lesson_num, "Новая тема")
        button_text = f"Урок {lesson_num} - {topic}"
        # Укорачиваем текст если слишком длинный
        if len(button_text) > 30:
            button_text = f"Урок {lesson_num} - {topic[:20]}..."
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"lesson_{lesson_num}")])
    
    # Добавляем кнопку "Назад"
    keyboard.append([InlineKeyboardButton("Назад", callback_data="lessons")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        f"Выбери урок из группы {start}-{end}:",
        reply_markup=reply_markup
    )


# Обработчик выбора конкретного урока
async def handle_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    lesson_num = query.data.split("_")[1]
    images_paths = []
    audio_path = None

    logger.debug(f"Начало обработки для урока {lesson_num}")

    try:
        try:
            lesson_topic = LESSON_TOPICS[int(lesson_num)]
            logger.debug(f"Тема урока {lesson_num}: {lesson_topic}")
        except KeyError:
            lesson_topic = f"Урок {lesson_num}"
            logger.error(f"Тема для урока {lesson_num} не найдена в LESSON_TOPICS")

        if not os.path.exists(IMAGES_FOLDER_LESSONS):
            logger.error(f"Папка с уроками не найдена: {IMAGES_FOLDER_LESSONS}")
            await query.message.reply_text("Извините, уроки временно недоступны 🚧")
            return

        images_paths = [
            os.path.join(IMAGES_FOLDER_LESSONS, f"lesson{lesson_num}_1.jpg"),
            os.path.join(IMAGES_FOLDER_LESSONS, f"lesson{lesson_num}_2.jpg")
        ]

        for image_path in images_paths:
            if os.path.exists(image_path):
                with open(image_path, "rb") as image:
                    await context.bot.send_photo(
                        chat_id=query.message.chat_id,
                        photo=image
                    )
            else:
                logger.error(f"Изображение не найдено: {image_path}")
                await query.message.reply_text("Извините, часть материалов урока временно недоступна 🚧")
                break

        audio_path = os.path.join(AUDIO_FOLDER, f"lesson{lesson_num}_audio.ogg")
        if os.path.exists(audio_path):
            with open(audio_path, "rb") as audio:
                await context.bot.send_voice(
                    chat_id=query.message.chat_id,
                    voice=audio
                )
        else:
            logger.error(f"Аудиофайл не найден: {audio_path}")
            await query.message.reply_text("Аудио для этого урока временно недоступно 🚧")

        await query.message.reply_text(f"📖 {lesson_topic}")

        # Определяем группу уроков для кнопки "Назад"
        lesson_num_int = int(lesson_num)
        if lesson_num_int <= 10:
            back_to = "lessons_1_10"
        elif lesson_num_int <= 20:
            back_to = "lessons_11_20"
        elif lesson_num_int <= 30:
            back_to = "lessons_21_30"
        elif lesson_num_int <= 40:
            back_to = "lessons_31_40"
        elif lesson_num_int <= 50:
            back_to = "lessons_41_50"
        elif lesson_num_int <= 60:
            back_to = "lessons_51_60"
        elif lesson_num_int <= 70:
            back_to = "lessons_61_70"

        # После завершения урока предлагаем следующие действия
        next_lesson_num = lesson_num_int + 1
        keyboard = []
        
        # Добавляем кнопку "Следующий урок" только если он существует
        if next_lesson_num <= max(LESSON_TOPICS.keys()):
            keyboard.append([
                InlineKeyboardButton(
                    "Следующий урок",
                    callback_data=f"lesson_{next_lesson_num}"
                )
            ])
        
        # Всегда добавляем кнопку "Назад" к группе уроков
        keyboard.append([
            InlineKeyboardButton(
                "Назад к урокам",
                callback_data=back_to
            )
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "Выберите действие:",
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"Ошибка при обработке урока {lesson_num}: {e}")
        await query.message.reply_text("Произошла ошибка при загрузке урока, попробуйте снова.")

# Обработчик выбора раздела квиза
async def handle_quiz_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "quiz_animals":
        # Создаем клавиатуру для выбора подраздела "Животные"
        keyboard = [
            [InlineKeyboardButton("Дикие животные", callback_data="quiz_wild_animals")],
            [InlineKeyboardButton("Домашние животные", callback_data="quiz_domestic_animals")],
            [InlineKeyboardButton("Назад", callback_data="back_to_quizzes")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Выбери подраздел:", reply_markup=reply_markup)
    elif query.data == "quiz_plants":
        # Создаем клавиатуру для выбора подраздела "Живая природа"
        keyboard = [
            [InlineKeyboardButton("Пищевые растения", callback_data="quiz_food_plants")],
            [InlineKeyboardButton("Лекарственные растения", callback_data="quiz_medicinal_plants")],
            [InlineKeyboardButton("Декоративные растения", callback_data="quiz_decorative_plants")],
            [InlineKeyboardButton("Назад", callback_data="back_to_quizzes")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Выбери подраздел:", reply_markup=reply_markup)


# Обработчик выбора подраздела "Животные"
async def handle_animals_subchoice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "back_to_animal_types":  # Обработка "Назад" в меню подразделов
        keyboard = [
            [InlineKeyboardButton("Дикие животные", callback_data="quiz_wild_animals")],
            [InlineKeyboardButton("Домашние животные", callback_data="quiz_domestic_animals")],
            [InlineKeyboardButton("← Назад к разделам", callback_data="back_to_quizzes")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Выбери подраздел:", reply_markup=reply_markup)
        return

    if query.data == "quiz_wild_animals":
        context.user_data["current_quiz"] = random.sample(list(quiz_data_wild_animals.items()), 5)
        context.user_data["images_folder"] = IMAGES_FOLDER_WILD_ANIMALS
    elif query.data == "quiz_domestic_animals":
        context.user_data["current_quiz"] = random.sample(list(quiz_data_domestic_animals.items()), 5)
        context.user_data["images_folder"] = IMAGES_FOLDER_DOMESTIC_ANIMALS

    context.user_data["user_score"] = 0
    context.user_data["current_question_index"] = 0

    # УБИРАЕМ КНОПКУ "НАЗАД" ПРИ СТАРТЕ КВИЗА
    await query.edit_message_text("Полетели!")  # Просто текст, без кнопки
    await send_question(update, context)  # Отправляем первый вопрос

# Обработчик выбора подраздела "Живая природа"
async def handle_plants_subchoice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "back_to_plant_types":  # Обработка "Назад" в меню подразделов
        keyboard = [
            [InlineKeyboardButton("Пищевые растения", callback_data="quiz_food_plants")],
            [InlineKeyboardButton("Лекарственные растения", callback_data="quiz_medicinal_plants")],
            [InlineKeyboardButton("Декоративные растения", callback_data="quiz_decorative_plants")],
            [InlineKeyboardButton("← Назад к разделам", callback_data="back_to_quizzes")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Выбери подраздел:", reply_markup=reply_markup)
        return

    if query.data == "quiz_food_plants":
        context.user_data["current_quiz"] = random.sample(list(quiz_data_food_plants.items()), 5)
        context.user_data["images_folder"] = IMAGES_FOLDER_FOOD_PLANTS
    elif query.data == "quiz_medicinal_plants":
        context.user_data["current_quiz"] = random.sample(list(quiz_data_medicinal_plants.items()), 5)
        context.user_data["images_folder"] = IMAGES_FOLDER_MEDICINAL_PLANTS
    elif query.data == "quiz_decorative_plants":
        context.user_data["current_quiz"] = random.sample(list(quiz_data_decorative_plants.items()), 5)
        context.user_data["images_folder"] = IMAGES_FOLDER_DECORATIVE_PLANTS

    context.user_data["user_score"] = 0
    context.user_data["current_question_index"] = 0

    # УБИРАЕМ КНОПКУ "НАЗАД" ПРИ СТАРТЕ КВИЗА
    await query.edit_message_text("Полетели!")  # Просто текст, без кнопки
    await send_question(update, context)




# Обработчик кнопки "Назад"
async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "back_to_start":
        # Go back to the main menu
        keyboard = [
            [InlineKeyboardButton("Квизы", callback_data="quizzes")],
            [InlineKeyboardButton("Уроки", callback_data="lessons")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Главное меню:", reply_markup=reply_markup)

    elif query.data == "back_to_quizzes":
        # Return to quiz section
        keyboard = [
            [InlineKeyboardButton("Животные", callback_data="quiz_animals")],
            [InlineKeyboardButton("Природа", callback_data="quiz_plants")],
            [InlineKeyboardButton("Назад", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Выбери раздел квиза:", reply_markup=reply_markup)

    elif query.data == "lessons":
        # Return to the lessons menu
        keyboard = [
            [InlineKeyboardButton("1-10 Уроки", callback_data="lessons_1_10")],
        [InlineKeyboardButton("11-20 Уроки", callback_data="lessons_11_20")],
        [InlineKeyboardButton("21-30 Уроки", callback_data="lessons_21_30")],
        [InlineKeyboardButton("31-40 Уроки", callback_data="lessons_31_40")],
        [InlineKeyboardButton("41-50 Уроки", callback_data="lessons_41_50")],
        [InlineKeyboardButton("51-60 Уроки", callback_data="lessons_51_60")],
        [InlineKeyboardButton("61-70 Уроки", callback_data="lessons_61_70")],
        [InlineKeyboardButton("Назад", callback_data="back_to_start")] 
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Выбери группу уроков:", reply_markup=reply_markup)

async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_start":
        # Возврат в главное меню
        keyboard = [
            [InlineKeyboardButton("Квизы", callback_data="quizzes")],
            [InlineKeyboardButton("Уроки", callback_data="lessons")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Главное меню:", reply_markup=reply_markup)
        
    elif query.data == "lessons":
        # Возврат к выбору группы уроков
        keyboard = [
           [InlineKeyboardButton("1-10 Уроки", callback_data="lessons_1_10")],
        [InlineKeyboardButton("11-20 Уроки", callback_data="lessons_11_20")],
        [InlineKeyboardButton("21-30 Уроки", callback_data="lessons_21_30")],
        [InlineKeyboardButton("31-40 Уроки", callback_data="lessons_31_40")],
        [InlineKeyboardButton("41-50 Уроки", callback_data="lessons_41_50")],
        [InlineKeyboardButton("51-60 Уроки", callback_data="lessons_51_60")],
        [InlineKeyboardButton("61-70 Уроки", callback_data="lessons_61_70")],
        [InlineKeyboardButton("Назад", callback_data="back_to_start")] 
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Выбери группу уроков:", reply_markup=reply_markup)

# Отправка текущего вопроса
async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_quiz = context.user_data.get("current_quiz", [])
    current_question_index = context.user_data.get("current_question_index", 0)
    
    if current_question_index >= len(current_quiz):
        await end_quiz(update, context)
        return

    image_file, correct_answer = current_quiz[current_question_index]
    context.user_data["correct_answer"] = correct_answer  # Сохраняем правильный ответ
    
    image_path = os.path.join(context.user_data["images_folder"], image_file)
    
    try:
        with open(image_path, "rb") as image:
            keyboard = create_word_keyboard(correct_answer)
            # Если это ответ на callback query (после нажатия кнопки)
            if update.callback_query:
                await update.callback_query.message.reply_photo(
                    photo=image,
                    caption="Мӗнле чӗрчун ку?",
                    reply_markup=keyboard
                )
            else:  # Если это первый вопрос
                await update.message.reply_photo(
                    photo=image,
                    caption="Мӗнле чӗрчун ку?",
                    reply_markup=keyboard
                )
    except Exception as e:
        logger.error(f"Ошибка при отправке вопроса: {e}")
        await update.effective_message.reply_text("Произошла ошибка, попробуйте снова.")

# Обработчик нажатия кнопки
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_answer = query.data
    correct_answer = context.user_data.get("correct_answer", "")

    # Проверяем ответ
    if user_answer == correct_answer:
        context.user_data["user_score"] += 1
        result_text = "Маттур! Тӗрӗс! 🎉"
    else:
        result_text = f"Тӗрӗс мар. Тӗрӗс ответ: {correct_answer}."

    # Обновляем сообщение
    try:
        await query.edit_message_caption(
            caption=f"{query.message.caption}\n\nВы выбрали: {user_answer}\n{result_text}",
            reply_markup=None
        )
    except Exception as e:
        logger.error(f"Ошибка при обновлении сообщения: {e}")

    # Переходим к следующему вопросу
    context.user_data["current_question_index"] += 1
    await send_question(update, context)

# Завершение квиза
async def end_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_score = context.user_data.get("user_score", 0)
    await update.effective_message.reply_text(f"Квиз завершен! Ты набрал {user_score} баллов из 5.")

    # Добавляем сообщение в зависимости от результата
    if user_score == 5:
        await update.effective_message.reply_text("Молодец! У тебя всё хорошо получается! 🎉")
    else:
        await update.effective_message.reply_text("Не хотите попробовать снова? Нажмите /start.")

    # Сброс состояния
    context.user_data.clear()

def main():
    application = Application.builder().token(TOKEN).build()

    # Обработчик команды /start
    application.add_handler(CommandHandler("start", start))

    # Главное меню
    application.add_handler(CallbackQueryHandler(handle_menu_choice, pattern="^(quizzes|lessons)$"))

    # Разделы квизов
    application.add_handler(CallbackQueryHandler(handle_quiz_choice, pattern="^(quiz_animals|quiz_plants)$"))
    application.add_handler(CallbackQueryHandler(handle_animals_subchoice, pattern="^(quiz_wild_animals|quiz_domestic_animals)$"))
    application.add_handler(CallbackQueryHandler(handle_plants_subchoice, pattern="^(quiz_food_plants|quiz_medicinal_plants|quiz_decorative_plants)$"))

    # Обработчики для уроков
    application.add_handler(CallbackQueryHandler(handle_lessons_group, pattern=r"^lessons_(\d+)_(\d+)$"))
    application.add_handler(CallbackQueryHandler(handle_lesson, pattern=r"^lesson_(\d+)$"))

    # Обработчик кнопки "Назад"
    application.add_handler(CallbackQueryHandler(handle_back, pattern="^(back_to_start|back_to_quizzes|lessons)$"))
    
    # Обработчик кнопок с ответами в квизе
    application.add_handler(CallbackQueryHandler(button_callback))

    application.run_polling()

if __name__ == "__main__":
    main()
    #cd "C:\Users\ega_c\OneDrive\Рабочий стол\Bot"
    #python bot.py.ini
    #C:\Users\ega_c\OneDrive\Рабочий стол\Bot
