from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import os
import random
import logging

# Настройка логирования
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# Токен вашего бота
TOKEN = "7962193493:AAHpofB5A7Wqdm1WITbMpMzTSyUmUXZ_MwM"

# Пути к папкам с изображениями
IMAGES_FOLDER_WILD_ANIMALS = "./Images/Animals/Wild"
IMAGES_FOLDER_DOMESTIC_ANIMALS = "./Images/Animals/domestic"
IMAGES_FOLDER_FOOD_PLANTS = "./Images/Nature/Foodplants"
IMAGES_FOLDER_MEDICINAL_PLANTS = "./Images/Nature/Medicinalplants"
IMAGES_FOLDER_DECORATIVE_PLANTS = "./Images/\Nature/Ornamentalplants"

# Данные для квиза: картинка -> правильный ответ
quiz_data_wild_animals = {
    "image1.jpg": "Мулкач",
    "image2.jpg": "Кашкӑр",
    "image3.jpg": "Упа",
    "image4.jpg": "Тилӗ",
    "image5.jpg": "Палан",
    "image6.jpg": "Пурӑш",
    "image7.jpg": "Хир кушакĕ",
    "image8.jpg": "Хăнтăр",
    "image9.jpg": "Хир сысни",
    "image10.jpg": "Юс",
    "image11.jpg": "Шурӑ упа",
    "image12.jpg": "Вӑлта тӑпри",
    "image13.jpg": "Шашка",
    "image14.jpg": "Чалăш суха",
    "image15.jpg": "Хир кушакĕ",
}

quiz_data_domestic_animals = {
    "image1.jpg": "Йытӑ",
    "image2.jpg": "Кушак",
    "image3.jpg": "Ӗне",
    "image4.jpg": "Лаша",
    "image5.jpg": "Качака",
    "image6.jpg": "Сурӑх",
    "image7.jpg": "Сысна",
    "image8.jpg": "Кролик",
    "image9.jpg": "Чӑх",
    "image10.jpg": "Кӑвакал",
    "image11.jpg": "Хур",
    "image12.jpg": "Кăркка",
    "image13.jpg": "Арлан",
    "image14.jpg": "Тинӗс сысни",
    "image15.jpg": "Попугай",
}

quiz_data_medicinal_plants = {
    "Image1.jpg": "Хурӑн",
    "Image2.jpg": "Катӑркас",
    "Image3.jpg": "Кӗтмел",
    "Image4.jpg": "Вӗлтрен",
    "Image5.jpg": "Кукшапуҫ",
}

quiz_data_food_plants = {
    "Image1.jpg": "Ҫӗрулми",
    "Image2.jpg": "Хӗрлӗ хурлӑхан",
    "Image3.jpg": "Хура ҫырла",
    "Image4.jpg": "Хура хурлӑхан",
    "Image5.jpg": "Улмуҫҫи",
}

quiz_data_decorative_plants = {
    "Image1.jpg": "Роза",
    "Image2.jpg": "Тюльпан",
    "Image3.jpg": "Гвоздика",
    "Image4.jpg": "Хризантема",
    "Image5.jpg": "Орхидея",
}

# Список случайных слов для неправильных ответов
random_words = [
    "Шкул", "Кайӑк", "Йывӑҫ", "Кӗленче", "Чӳрече", "Ылтӑн", "Алӑк", "Турат", "Патак", "Пукан", "Сӗтел", "Савӑт-сапа", "Кӗнеке", "Кӑранташ", "Шӑпчӑк", "Сывлӑш", "Шӑрчӑк", "Ҫанталӑк", "Ҫулталӑк", "Пӳрне",
    "Мӑйӑр", "Чӗре", "Хӗвел", "Уйӑх", "Ҫӑлтӑр", "Юр", "Ҫунашка", "Йӗлтӗр", "Пуҫ", "Хӑяр", "Шӑна", "Яшка", "Шыв", "Вутӑ", "Ӳкерчӗк", "Хула"
]

# Создание клавиатуры с кнопками для выбора слов
def create_word_keyboard(correct_answer):
    # Создаем список всех возможных ответов из quiz_data (исключая текущий правильный)
    all_quiz_answers = [v for k, v in quiz_data_wild_animals.items() if v != correct_answer] + \
                       [v for k, v in quiz_data_domestic_animals.items() if v != correct_answer] + \
                       [v for k, v in quiz_data_food_plants.items() if v != correct_answer] + \
                       [v for k, v in quiz_data_medicinal_plants.items() if v != correct_answer] + \
                       [v for k, v in quiz_data_decorative_plants.items() if v != correct_answer]
    
    # Создаем список всех случайных слов
    all_random_words = random_words.copy()
    
    # Объединяем оба списка
    all_possible_wrong_answers = all_quiz_answers + all_random_words
    
    # Выбираем 3 случайных неправильных ответа
    wrong_answers = random.sample(all_possible_wrong_answers, 3)
    
    # Создаем список из 4 вариантов: 1 правильный и 3 неправильных
    options = [correct_answer] + wrong_answers
    random.shuffle(options)  # Перемешиваем варианты

    # Создаем клавиатуру
    keyboard = [[InlineKeyboardButton(word, callback_data=word)] for word in options]
    return InlineKeyboardMarkup(keyboard)

# Обработчик команды /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Создаем клавиатуру для выбора между квизами и уроками
    keyboard = [
        [InlineKeyboardButton("Квизы", callback_data="quizzes")],
        [InlineKeyboardButton("Уроки", callback_data="lessons")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Привет! Выбери, что хочешь сделать:", reply_markup=reply_markup)

# Обработчик выбора между квизами и уроками
async def handle_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "quizzes":
        # Создаем клавиатуру для выбора раздела квиза
        keyboard = [
            [InlineKeyboardButton("Животные", callback_data="quiz_animals")],
            [InlineKeyboardButton("Природа", callback_data="quiz_plants")],
            [InlineKeyboardButton("Назад", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Выбери раздел квиза:", reply_markup=reply_markup)
    elif query.data == "lessons":
        await query.edit_message_text("Уроки пока не доступны. Следите за обновлениями!")

# Обработчик выбора раздела квиза
async def handle_quiz_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "quiz_animals":
        # Создаем клавиатуру для выбора подраздела "Животные"
        keyboard = [
            [InlineKeyboardButton("Дикие животные", callback_data="quiz_wild_animals")],
            [InlineKeyboardButton("Домашние животные", callback_data="quiz_domestic_animals")],
            [InlineKeyboardButton("Назад", callback_data="back_to_quizzes")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Выбери подраздел:", reply_markup=reply_markup)
    elif query.data == "quiz_plants":
        # Создаем клавиатуру для выбора подраздела "Живая природа"
        keyboard = [
            [InlineKeyboardButton("Пищевые растения", callback_data="quiz_food_plants")],
            [InlineKeyboardButton("Лекарственные растения", callback_data="quiz_medicinal_plants")],
            [InlineKeyboardButton("Декоративные растения", callback_data="quiz_decorative_plants")],
            [InlineKeyboardButton("Назад", callback_data="back_to_quizzes")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Выбери подраздел:", reply_markup=reply_markup)

# Обработчик выбора подраздела "Животные"
async def handle_animals_subchoice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "quiz_wild_animals":
        context.user_data["current_quiz"] = random.sample(list(quiz_data_wild_animals.items()), 5)
        context.user_data["images_folder"] = IMAGES_FOLDER_WILD_ANIMALS  # Сохраняем путь к папке
    elif query.data == "quiz_domestic_animals":
        context.user_data["current_quiz"] = random.sample(list(quiz_data_domestic_animals.items()), 5)
        context.user_data["images_folder"] = IMAGES_FOLDER_DOMESTIC_ANIMALS  # Сохраняем путь к папке

    context.user_data["user_score"] = 0
    context.user_data["current_question_index"] = 0

    await query.edit_message_text("Полетели!")
    await send_question(update, context)

# Обработчик выбора подраздела "Живая природа"
async def handle_plants_subchoice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "quiz_food_plants":
        context.user_data["current_quiz"] = random.sample(list(quiz_data_food_plants.items()), 5)
        context.user_data["images_folder"] = IMAGES_FOLDER_FOOD_PLANTS  # Сохраняем путь к папке
    elif query.data == "quiz_medicinal_plants":
        context.user_data["current_quiz"] = random.sample(list(quiz_data_medicinal_plants.items()), 5)
        context.user_data["images_folder"] = IMAGES_FOLDER_MEDICINAL_PLANTS  # Сохраняем путь к папке
    elif query.data == "quiz_decorative_plants":
        context.user_data["current_quiz"] = random.sample(list(quiz_data_decorative_plants.items()), 5)
        context.user_data["images_folder"] = IMAGES_FOLDER_DECORATIVE_PLANTS  # Сохраняем путь к папке

    context.user_data["user_score"] = 0
    context.user_data["current_question_index"] = 0

    await query.edit_message_text("Полетели!")
    await send_question(update, context)

# Обработчик кнопки "Назад"
async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "back_to_start":
        # Возврат к главному меню
        keyboard = [
            [InlineKeyboardButton("Квизы", callback_data="quizzes")],
            [InlineKeyboardButton("Уроки", callback_data="lessons")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Привет! Выбери, что хочешь сделать:", reply_markup=reply_markup)
    elif query.data == "back_to_quizzes":
        # Возврат к выбору раздела квиза
        keyboard = [
            [InlineKeyboardButton("Животные", callback_data="quiz_animals")],
            [InlineKeyboardButton("Природа", callback_data="quiz_plants")],
            [InlineKeyboardButton("Назад", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Выбери раздел квиза:", reply_markup=reply_markup)

# Отправка текущего вопроса
async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_quiz = context.user_data.get("current_quiz", [])
    current_question_index = context.user_data.get("current_question_index", 0)
    images_folder = context.user_data.get("images_folder")  # Получаем путь к папке из контекста

    if current_question_index >= len(current_quiz):
        await end_quiz(update, context)
        return

    image_path, correct_answer = current_quiz[current_question_index]
    context.user_data["correct_answer"] = correct_answer.lower()

    full_path = os.path.join(images_folder, image_path)  # Используем путь к папке
    logger.info(f"Пытаюсь открыть файл: {full_path}")  # Логируем путь

    try:
        with open(full_path, "rb") as image:
            keyboard = create_word_keyboard(correct_answer)
            await update.effective_message.reply_photo(
                photo=image,
                caption="Мӗнле чӗрчун ку?",
                reply_markup=keyboard
            )
    except FileNotFoundError:
        logger.error(f"Файл {full_path} не найден.")
        await update.effective_message.reply_text("Ошибка: файл с изображением не найден.")
    except Exception as e:
        logger.error(f"Ошибка при открытии файла: {e}")
        await update.effective_message.reply_text("Произошла ошибка при загрузке изображения.")

# Обработчик нажатия кнопки
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_answer = query.data.lower()
    correct_answer = context.user_data.get("correct_answer", "")

    # Проверяем ответ
    if user_answer == correct_answer:
        context.user_data["user_score"] += 1
        result_text = "Маттур! Тӗрӗс! 🎉"
    else:
        result_text = f"Тӗрӗс мар. Тӗрӗс ответ: {correct_answer}."

    # Обновляем сообщение с картинкой и кнопками, добавляя результат
    await query.edit_message_caption(
        caption=f"Мӗнле чӗрчун ку?\n\nВы выбрали: {user_answer}\n{result_text}",
        reply_markup=None  # Убираем кнопки после ответа
    )

    # Переходим к следующему вопросу
    context.user_data["current_question_index"] += 1
    await send_question(update, context)

# Завершение квиза
async def end_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_score = context.user_data.get("user_score", 0)
    await update.effective_message.reply_text(f"Квиз завершен! Ты набрал {user_score} баллов из 5.")

    # Добавляем сообщение в зависимости от результата
    if user_score == 5:
        await update.effective_message.reply_text("Молодец! У тебя всё хорошо получается! 🎉")
    else:
        await update.effective_message.reply_text("Не хотите попробовать снова? Нажмите /start.")

    # Сброс состояния
    context.user_data.clear()

# Основная функция
def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_menu_choice, pattern="^(quizzes|lessons)$"))
    application.add_handler(CallbackQueryHandler(handle_quiz_choice, pattern="^(quiz_animals|quiz_plants)$"))
    application.add_handler(CallbackQueryHandler(handle_animals_subchoice, pattern="^(quiz_wild_animals|quiz_domestic_animals)$"))
    application.add_handler(CallbackQueryHandler(handle_plants_subchoice, pattern="^(quiz_food_plants|quiz_medicinal_plants|quiz_decorative_plants)$"))
    application.add_handler(CallbackQueryHandler(handle_back, pattern="^(back_to_start|back_to_quizzes)$"))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.run_polling()

if __name__ == "__main__":
    main()
    #cd "C:\Users\ega_c\OneDrive\Рабочий стол\Bot"
    #python bot.py.ini
    #C:\Users\ega_c\OneDrive\Рабочий стол\Bot
